package easydynamoclient

import (
	"github.com/JuanValero25/EasyDynamoDB/lambdaconfig"
	"github.com/satori/go.uuid"
	"reflect"
	"fmt"
	"time"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/dynamodb"
)

func ProcessTableInfo(tableObject lambdaconfig.TableInfo) {

	t := reflect.TypeOf(tableObject).Elem()

	for i := 0; i < t.NumField(); i++ {
		_, trued := t.Field(i).Tag.Lookup("AutoGenerated")
		if trued {
			ui, _ := uuid.NewV4()
			reflect.ValueOf(tableObject).Elem().Field(i).SetString(ui.String())

		}
	}

}

func updateReflectionHelper(tableObject lambdaconfig.TableInfo) *dynamodb.UpdateItemInput {

	start := time.Now()
	av, _ := dynamodbattribute.MarshalMap(tableObject)
	fmt.Println(av)



	t := reflect.TypeOf(tableObject)
	startSet:="set "
	for i := 0; i < t.NumField(); i++ {
		startSet=startSet+t.Field(i).Name+" =: "+t.Field(i).Name+", "
		if t.Field(i).Type.Kind() == reflect.Struct {
			fmt.Println(t.Field(i).Type.Name())
		}
		fmt.Println(t.Field(i).Type.Kind())
	}

	startSet = startSet[:len(startSet)-2]

	input := &dynamodb.UpdateItemInput{
		Key:av,
		ExpressionAttributeValues: av,
		UpdateExpression: &startSet,
		TableName:                 aws.String(GetEnvironmentStage() + tableObject.TableName()),
	}
	fmt.Println(startSet)

	elapsed := time.Since(start)
	fmt.Println("reflections time took", elapsed)

	return input
}
